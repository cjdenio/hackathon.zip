// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")
}

model Hackathon {
  id        String     @id @default(uuid())
  slug      String     @unique
  name      String
  attendees Attendee[]

  attendeeAttributes AttendeeAttribute[]

  // event info
  location  String
  startDate DateTime?
  endDate   DateTime?
  schedule  Schedule?
  signupForm  SignupForm?
  dashboard AttendeeDashboard?
  sponsors  Sponsor[]
  leads     Lead[]

  // branding
  website   String?
  logoUrl   String?
  bannerUrl String?

  // features
  registerEnabled  Boolean @default(false)
  checkInEnabled   Boolean @default(false)
  broadcastEnabled Boolean @default(false)
  scheduleEnabled  Boolean @default(false)
  shipEnabled      Boolean @default(false)
  integrateEnabled Boolean @default(false)
  financeEnabled   Boolean @default(false)
  sponsorsEnabled Boolean @default(false)
  leadsEnabled     Boolean @default(false)

  hcbId String?

  customDomain String? @unique

  ownerId         String
  collaboratorIds String[]
}

model AttendeeDashboard {
  id          String                  @id @default(uuid())
  body        String
  cards       AttendeeDashboardCard[]
  links       AttendeeDashboardLink[]
  hackathonId String                  @unique
  hackathon   Hackathon               @relation(fields: [hackathonId], references: [id])
}

model AttendeeDashboardCard {
  id                  String                  @id @default(uuid())
  text                String
  links               AttendeeDashboardLink[]
  header              String
  AttendeeDashboard   AttendeeDashboard?      @relation(fields: [attendeeDashboardId], references: [id])
  attendeeDashboardId String?
}

model AttendeeDashboardLink {
  id          String                 @id @default(uuid())
  text        String
  url         String
  cardId      String?
  card        AttendeeDashboardCard? @relation(fields: [cardId], references: [id])
  dashboardId String?
  dashboard   AttendeeDashboard?     @relation(fields: [dashboardId], references: [id])
}

model Schedule {
  id          String    @id @default(uuid())
  hackathonId String    @unique
  tracks      Track[]
  hackathon   Hackathon @relation(fields: [hackathonId], references: [id])
}

model Sponsor {
  id         String    @id @default(uuid())
  hackathonId String    
  name       String
  logoUrl    String?
  website    String?

  showOnWebsite Boolean @default(false)

  // Private information
  contactName  String?
  contactEmail String?
  contactPhone String?

  amountCash  Float?
  amountOther String?

  hackathon   Hackathon @relation(fields: [hackathonId], references: [id])
}

model Lead {
  id        String    @id @default(uuid())
  hackathonId String   
  name      String
  email     String
  phone     String?
  company   String?
  jobTitle  String?

  type     LeadType

  hackathon   Hackathon @relation(fields: [hackathonId], references: [id])
}

enum LeadType {
  Venue
  Sponsor
  Other
}

model SignupForm {
  id          String    @id @default(uuid())
  fields SignupFormField[]
  hackathonId String    @unique
  hackathon   Hackathon @relation(fields: [hackathonId], references: [id])
}

model SignupFormField {
  id           String    @id @default(uuid())
  attributeId  String @unique
  attribute    AttendeeAttribute @relation(fields: [attributeId], references: [id])
  
  required    Boolean
  label       String
  description String?
  plaecholder String?
  order Int

  signupFormId String?
  signupForm   SignupForm? @relation(fields: [signupFormId], references: [id])
}

model Track {
  id         String   @id @default(uuid())
  events     Event[]
  scheduleId String   @unique
  schedule   Schedule @relation(fields: [scheduleId], references: [id])
}

model Event {
  id        String   @id @default(uuid())
  name      String
  location  String
  startDate DateTime
  endDate   DateTime
  trackId   String
  track     Track    @relation(fields: [trackId], references: [id])
}

model AttendeeAttribute {
  id          String    @id @default(uuid())
  name        String
  type        String
  options     String[]

  order       Int

  signupFormField SignupFormField?
  
  hackathonId String
  hackathon   Hackathon @relation(fields: [hackathonId], references: [id])

  values AttendeeAttributeValue[]
}

model AttendeeAttributeValue {
  id          String            @id @default(uuid())
  value       String
  attendeeId  String
  attendee    Attendee          @relation(fields: [attendeeId], references: [id])
  formFieldId String
  formField   AttendeeAttribute @relation(fields: [formFieldId], references: [id])
}

model Attendee {
  id   String @id @default(uuid())
  name String

  attributeValues AttendeeAttributeValue[]
  email           String                   @unique

  checkedIn  Boolean @default(false)
  checkInKey String? @unique

  hackathonId String
  hackathon   Hackathon @relation(fields: [hackathonId], references: [id])
  tokens      Token[]
}

model Token {
  token      String   @unique @default(cuid())
  magicKey   String?  @unique @default(cuid())
  createdAt  DateTime @default(now())
  attendeeId String
  attendee   Attendee @relation(fields: [attendeeId], references: [id])
}
